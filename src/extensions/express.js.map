{"version":3,"file":"express.js","sourceRoot":"","sources":["express.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0BAAyD;AA+CzD,SAAsB,gBAAgB,CACpC,gBAAwC,EACxC,SAAmB,gBAAY,EAAE;;QAEjC,MAAM,MAAM,GAAG,MAAM,UAAM,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,CAAC,CAAA;QAEpD,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAClB,MAAM,EAAE,kBAAkB,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAA;YAC9E,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,QAAI,CAAC,YAAY,CAAC,CAAA;YAE1C,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnC,OAAO,EAAE,GAAG;gBACZ,OAAO,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE;aAC/B,CAAC,CAAC,CAAC,SAAS,CAAA;YAEb,GAAG,CAAC,IAAI,mBACH,gBAAgB,IACnB,mBAAmB,EAAE,kBAAkB,EACvC,aAAa,EAAE,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAC9C,OAAO,IACP,CAAA;QACJ,CAAC,CAAA;IACH,CAAC;CAAA;AAtBD,4CAsBC","sourcesContent":["import { createPlugin, PluginV2, STREAM, SPSP } from '..'\nimport { RequestHandler } from 'express'\n\n/**\n * Get a simple middleware function that will return an SPSP response to any request.\n *\n * The function creates a STREAM server using the provided plugin and each time the middleware is called it\n * generates a new address and secret and adds these to the default response.\n *\n * If the middleware is called with a `receiveAmount` then the balance property is set.\n *\n * The `destination_account` and `shared_secret` should not be set on the\n * `defaultResponse` as these will be overwritten.\n *\n * Example: To use with express\n *\n * ```js\n * const ilp = require('ilp')\n *  const app = require('express')()\n *  ilp.createSpspMiddleware({receiver_info:{name: 'Bob Smith'}}).then(spsp => {\n *    app.get('/.well-known/pay', (req, resp) => {\n *      const {contentType, body} = spsp()\n *      resp.set('Content-Type', contentType)\n *      resp.send(body)\n *    })\n *    app.listen(3000)\n *  })\n * ```\n * Example: To use with Koa\n *\n * ```\n * const ilp = require('ilp')\n * const Koa = require('koa')\n * const app = new Koa()\n * const middleware = ilp.createSpspMiddleware({receiver_info:{name: 'Bob Smith'}})\n *\n * app.use(async ctx => {\n *   const spsp = await middleware\n *   const {contentType, body} = spsp()\n *   ctx.set('Content-Type', contentType)\n *   ctx.body = body\n * })\n * app.listen(3000)\n * ```\n * @param {*} responseTemplate The object that will be returned in the SPSP response.\n * @param {*} plugin The plugin to use to receive payments\n */\nexport async function createMiddleware (\n  responseTemplate?: SPSP.JsonSpspResponse,\n  plugin: PluginV2 = createPlugin()): Promise<RequestHandler> {\n\n  const server = await STREAM.createServer({ plugin })\n\n  return (req, rsp) => {\n    const { destinationAccount, sharedSecret } = server.generateAddressAndSecret()\n    rsp.set('Content-Type', SPSP.CONTENT_TYPE)\n\n    const balance = (req.query.amount) ? {\n      current: '0',\n      maximum: `${req.query.amount}`\n    } : undefined\n\n    rsp.send({\n      ...responseTemplate,\n      destination_account: destinationAccount,\n      shared_secret: sharedSecret.toString('base64'),\n      balance\n    })\n  }\n}\n"]}
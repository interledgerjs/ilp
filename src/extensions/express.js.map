{"version":3,"file":"express.js","sourceRoot":"","sources":["express.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0BAAiG;AAEjG,4CAA+C;AA8B/C,SAAsB,gBAAgB,CACpC,gBAA8B,EAC9B,SAA6B,gBAAY,EAAE;;QAE3C,MAAM,MAAM,GAAG,MAAM,UAAM,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,CAAC,CAAA;QAEpD,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAElB,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAA;YAElD,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3D,CAAC,CAAC,IAAI,mBAAe,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC;gBAC3D,CAAC,CAAC,MAAM,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAA;YAE9C,MAAM,SAAS,GAAG,wBAAc,CAAC,KAAK,CAAC,CAAA;YAEvC,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,QAAI,CAAC,YAAY,CAAC,CAAA;YAC1C,GAAG,CAAC,IAAI,mBACH,gBAAgB,EAChB,SAAS,EACZ,CAAA;QACJ,CAAC,CAAA;IACH,CAAC;CAAA;AAtBD,4CAsBC","sourcesContent":["import { createPlugin, JsonInvoice, PluginApi, STREAM, SPSP, receive, InvoiceReceiver } from '..'\nimport { RequestHandler } from 'express'\nimport { serializePayee } from '../lib/invoice'\n\n/**\n * Get a simple middleware function that will return an SPSP response to any request.\n *\n * The function creates a STREAM server using the provided plugin and each time the middleware is called it\n * generates a new address and secret and adds these to the default response.\n *\n * If the middleware is called with a `receiveAmount` then the balance property is set.\n *\n * The `destination_account` and `shared_secret` should not be set on the\n * `defaultResponse` as these will be overwritten.\n *\n * Example: To use with express\n *\n * ```js\n *  const ilp = require('ilp')\n *  const app = require('express')()\n *  ilp.createMiddleware({receiver_info:{name: 'Bob Smith'}}).then(spsp => {\n *    app.get('/.well-known/pay', (req, resp) => {\n *      const {contentType, body} = spsp()\n *      resp.set('Content-Type', contentType)\n *      resp.send(body)\n *    })\n *    app.listen(3000)\n *  })\n * ```\n * @param {*} responseTemplate The object that will be returned in the SPSP response.\n * @param {*} plugin The plugin to use to receive payments\n */\nexport async function createMiddleware (\n  responseTemplate?: JsonInvoice,\n  plugin: PluginApi.PluginV2 = createPlugin()): Promise<RequestHandler> {\n\n  const server = await STREAM.createServer({ plugin })\n\n  return (req, rsp) => {\n\n    const reference = req.query.reference || undefined\n\n    const payee = (req.query.amount && !isNaN(+req.query.amount))\n      ? new InvoiceReceiver(+req.query.amount, reference, server)\n      : server.generateAddressAndSecret(reference)\n\n    const jsonPayee = serializePayee(payee)\n\n    rsp.set('Content-Type', SPSP.CONTENT_TYPE)\n    rsp.send({\n      ...responseTemplate,\n      ...jsonPayee\n    })\n  }\n}\n"]}
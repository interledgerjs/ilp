{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport * as crypto from 'crypto'\nimport * as ILDCP from 'ilp-protocol-ildcp'\nimport * as SPSP from './lib/spsp'\nimport * as STREAM from 'ilp-protocol-stream'\nimport * as express from './extensions/express'\nimport { JsonInvoice, InvoiceReceiver, Invoice } from './lib/invoice'\nimport * as PluginApi from './lib/plugin'\nimport { Receipt } from './lib/receipt'\nconst createLogger = require('ilp-logger')\nconst log = createLogger('ilp')\n\nexport const DEFAULT_PLUGIN_MODULE = 'ilp-plugin-btp'\n\n/**\n * Create an instance of an ILP plugin\n *\n * This functions loads an instance of an ILP plugin.\n *\n * The constructor options and module name can be passed to the function as parameters.\n * If no parameters are provided then it willattempt to find the config in environment variables.\n * If these are not found it will load a plugin connected to a local moneyd instance on port 7768.\n *\n * The Environment variables that can be set are:\n *  - ILP_PLUGIN : The name/path of the plugin module\n *  - ILP_PLUGIN_OPTIONS : The options passed to the constructor, serialized as a JSON object.\n *\n * This function replaces the module 'ilp-plugin' which has been deprecated.\n *\n * Example 1: Explicit config\n *\n * ```js\n * const plugin = createPlugin({ \"server\" : \"btp+ws://myname:0a0cfd180fb5a5d32ebdf5344ce9c076@localhost:7768\" })\n * ```\n *\n * Example 2: Config from env\n *\n * ```sh\n *  $ ILP_PLUGIN=\"ilp-plugin-btp\" \\\n *    ILP_PLUGIN_OPTIONS=\"{\\\"server\\\":\\\"btp+ws://myname:0a0cfd180fb5a5d32ebdf5344ce9c076@localhost:7768\\\"}\" \\\n *    node app.js\n * ```\n *\n * Where `app.js` has the following:\n *\n * ```js\n * const plugin = createPlugin()\n * ```\n * @param {*} pluginOptions The options passed to the plugin constructor\n * @param {*} pluginModuleName The module name of the plugin, defaults to `ilp.DEFAULT_PLUGIN_MODULE`\n */\nfunction createPlugin (pluginOptions?: any, pluginModuleName: string = DEFAULT_PLUGIN_MODULE): PluginApi.PluginV2 {\n  const envModuleName = process.env.ILP_PLUGIN || DEFAULT_PLUGIN_MODULE\n  const envOptions = process.env.ILP_PLUGIN_OPTIONS || process.env.ILP_CREDENTIALS\n\n  const moduleName = pluginModuleName || envModuleName\n  let options = envOptions ? JSON.parse(envOptions) : {}\n\n  // TODO: Deprecated behaviour can be removed in future\n  if (process.env.ILP_CREDENTIALS && !process.env.ILP_PLUGIN_OPTIONS) {\n    log.warn(`Loading options from environment var ILP_CREDENTIALS is deprecated, use ILP_PLUGIN_OPTIONS instead.`)\n  }\n\n  // Replicate behaviour of 'ilp-module' for backwards compatability\n  // TODO: Deprecated behaviour can be removed in future\n  if (moduleName === 'ilp-plugin-btp') {\n    const name = (pluginOptions && pluginOptions.name) || ''\n    if (name) {\n      log.warn(`'pluginOptions.name' is deprecated. ` +\n        `Please provide the correct options for the plugin. ` +\n        `Example: '{ \"server\" : \"btp+ws://<name>:<secret>@localhost:7768\" }'`)\n    } else {\n      if (pluginOptions) {\n        options = pluginOptions\n      }\n    }\n    if (Object.keys(options).length === 0) {\n      options.server = `btp+ws://${name}:${crypto.randomBytes(16).toString('hex')}@localhost:7768`\n    }\n  } else {\n    options = pluginOptions\n  }\n\n  const Plugin = require(moduleName)\n  return new Plugin(options) as PluginApi.PluginV2\n}\n\n/**\n * Get the dynamic configuration provided for a plugin from the upstream server\n *\n * @param plugin The plugin used to connect to the upstream service\n */\nasync function fetchConfig (plugin: PluginApi.PluginV2): Promise<ILDCP.IldcpResponse> {\n  if (!plugin.isConnected) {\n    throw Error('Plugin must be connected to get config.')\n  }\n  return ILDCP.fetch(plugin.sendData.bind(plugin))\n}\n\n/**\n * Create a new `Invoice` that is paid when a specific amount is received.\n *\n * This will create or use a STREAM Server to generate an ILP Address and secret for the sender to use.\n * These are returned as properties of the `Invoice`.\n *\n * Calling `receivePayment()` on the invoice returns a promise that will resolve with the actual amount received,\n * or reject if it times out.\n *\n * @param {*} amount The amount to receive\n * @param {*} reference The payment reference\n * @param {*} pluginOrServer The plugin to use to receive payments or an existing STREAM server to use\n */\nasync function receive (amount: BigNumber.Value, reference: string, pluginOrServer: PluginApi.PluginV2 | STREAM.Server = createPlugin()) {\n\n  const server = (pluginOrServer instanceof STREAM.Server)\n    ? pluginOrServer\n    : await STREAM.createServer({ plugin : pluginOrServer })\n\n  return new InvoiceReceiver(amount, reference, server)\n}\n\ntype PaymentPointerAndAmount = { amount: BigNumber.Value, paymentPointer: string }\n\n/**\n */\nasync function pay (payee: PaymentPointerAndAmount | Invoice, plugin: PluginApi.PluginV2 = createPlugin()): Promise<Receipt> {\n\n  const paymentPointerReceiver = payee as PaymentPointerAndAmount\n  if (paymentPointerReceiver.paymentPointer) {\n    return SPSP.pay(plugin, {\n      receiver: paymentPointerReceiver.paymentPointer,\n      sourceAmount: paymentPointerReceiver.amount\n    })\n  } else {\n    const { destinationAccount, sharedSecret, amount } = payee as Invoice\n    const connection = await STREAM.createConnection({\n      destinationAccount,\n      plugin,\n      sharedSecret\n    })\n\n    const stream = connection.createStream()\n    await stream.sendTotal(amount)\n    await connection.end()\n    return {\n      sourceAccount: connection.sourceAccount,\n      destinationAccount: destinationAccount,\n      sent: {\n        amount: new BigNumber(connection.totalSent),\n        assetCode: connection.sourceAssetCode,\n        assetScale: connection.sourceAssetScale\n      },\n      received: {\n        amount: new BigNumber(connection.totalDelivered),\n        assetCode: connection.destinationAssetCode,\n        assetScale: connection.destinationAssetScale\n      }\n    }\n  }\n}\n\nexport {\n  ILDCP, // ILDCP Protocol module\n  STREAM, // STREAM Protocol module\n  SPSP, // SPSP Protocol module\n  PluginApi, // Plugin API types\n  express, // express extensions\n  InvoiceReceiver, // a receiver invoice\n  JsonInvoice, // JSON serialized invoice (used in SPSP response)\n  Receipt, // a receipt with the details of a completed payment\n  createLogger, // utility logging function\n  createPlugin, // utility plugin initializer\n  fetchConfig, // Use ILDCP to get the config for a plugin\n  receive, // receive a payment (creates an invoice)\n  pay // make a payment\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport * as crypto from 'crypto'\nimport * as ILDCP from 'ilp-protocol-ildcp'\nimport * as SPSP from './lib/spsp'\nimport * as STREAM from 'ilp-protocol-stream'\nimport { Invoice } from './lib/invoice'\nimport { PluginV2 } from './lib/plugin'\nconst createLogger = require('ilp-logger')\nconst log = createLogger('ilp')\n\nexport const DEFAULT_PLUGIN_MODULE = 'ilp-plugin-btp'\n\n/**\n * Create an instance of an ILP plugin\n *\n * This functions loads an instance of an ILP plugin.\n *\n * The constructor options and module name can be passed to the function as parameters.\n * If no parameters are provided then it willattempt to find the config in environment variables.\n * If these are not found it will load a plugin connected to a local moneyd instance on port 7768.\n *\n * The Environment variables that can be set are:\n *  - ILP_PLUGIN : The name/path of the plugin module\n *  - ILP_PLUGIN_OPTIONS : The options passed to the constructor, serialized as a JSON object.\n *\n * This function replaces the module 'ilp-plugin' which has been deprecated.\n *\n * Example 1: Explicit config\n *\n * ```js\n * const plugin = createPlugin({ \"server\" : \"btp+ws://myname:0a0cfd180fb5a5d32ebdf5344ce9c076@localhost:7768\" })\n * ```\n *\n * Example 2: Config from env\n *\n * ```sh\n *  $ ILP_PLUGIN=\"ilp-plugin-btp\" \\\n *    ILP_PLUGIN_OPTIONS=\"{\\\"server\\\":\\\"btp+ws://myname:0a0cfd180fb5a5d32ebdf5344ce9c076@localhost:7768\\\"}\" \\\n *    node app.js\n * ```\n *\n * Where `app.js` has the following:\n *\n * ```js\n * const plugin = createPlugin()\n * ```\n * @param {*} pluginOptions The options passed to the plugin constructor\n * @param {*} pluginModuleName The module name of the plugin, defaults to `ilp.DEFAULT_PLUGIN_MODULE`\n */\nfunction createPlugin (pluginOptions?: any, pluginModuleName: string = DEFAULT_PLUGIN_MODULE): PluginV2 {\n  const envModuleName = process.env.ILP_PLUGIN || DEFAULT_PLUGIN_MODULE\n  const envOptions = process.env.ILP_PLUGIN_OPTIONS || process.env.ILP_CREDENTIALS\n\n  const moduleName = pluginModuleName || envModuleName\n  let options = envOptions ? JSON.parse(envOptions) : {}\n\n  // TODO: Deprecated behaviour can be removed in future\n  if (process.env.ILP_CREDENTIALS && !process.env.ILP_PLUGIN_OPTIONS) {\n    log.warn(`Loading options from environment var ILP_CREDENTIALS is deprecated, use ILP_PLUGIN_OPTIONS instead.`)\n  }\n\n  // Replicate behaviour of 'ilp-module' for backwards compatability\n  // TODO: Deprecated behaviour can be removed in future\n  if (moduleName === 'ilp-plugin-btp') {\n    const name = (pluginOptions && pluginOptions.name) || ''\n    if (name) {\n      log.warn(`'pluginOptions.name' is deprecated. ` +\n        `Please provide the correct options for the plugin. ` +\n        `Example: '{ \"server\" : \"btp+ws://<name>:<secret>@localhost:7768\" }'`)\n    } else {\n      if (pluginOptions) {\n        options = pluginOptions\n      }\n    }\n    if (Object.keys(options).length === 0) {\n      options.server = `btp+ws://${name}:${crypto.randomBytes(16).toString('hex')}@localhost:7768`\n    }\n  } else {\n    options = pluginOptions\n  }\n\n  const Plugin = require(moduleName)\n  return new Plugin(options) as PluginV2\n}\n\n/**\n * Create a new `Receipt` that is paid when a specific amount is received.\n *\n * This will create or use a STREAM Server to generate an ILP Address and secret for the sender to use.\n * These are returned as properties of the `Receipt`.\n *\n * Calling `receivePayment()` on the receipt returns a promise that will resolve with the actual amount received,\n * or reject if it times out.\n *\n * @param {*} amount The amount to receive\n * @param {*} pluginOrServer The plugin to use to receive payments or an existing STREAM server to use\n */\nasync function receive (amount: BigNumber.Value, pluginOrServer: PluginV2 | STREAM.Server = createPlugin()) {\n\n  const server = (pluginOrServer instanceof STREAM.Server)\n    ? pluginOrServer\n    : await STREAM.createServer({ plugin : pluginOrServer })\n\n  return new Invoice(amount, server)\n}\n\n/**\n * Make a payment to the given payee\n *\n * @param {*} amount The maximum amount to send (scale and currency implied by the plugin that is used)\n * @param {*} payee The payee. Either an SPSP receiver (string) or `{ destinationAccount, sharedSecret }`\n * @param {*} plugin The plugin to use to send payments\n */\nasync function pay (\n  amount: BigNumber.Value,\n  payee: string | { destinationAccount: string, sharedSecret: Buffer },\n  plugin: PluginV2 = createPlugin()) {\n\n  if (typeof payee === 'string') {\n    return SPSP.pay(plugin, { receiver: payee, sourceAmount: amount })\n  } else {\n    const { destinationAccount, sharedSecret } = payee\n    const connection = await STREAM.createConnection({\n      destinationAccount,\n      plugin,\n      sharedSecret\n    })\n\n    const stream = connection.createStream()\n    await stream.sendTotal(amount)\n    await connection.end()\n    return new BigNumber(connection.totalSent)\n  }\n}\n\nexport {\n  ILDCP,\n  STREAM,\n  SPSP,\n  PluginV2,\n  Invoice,\n  createLogger,\n  createPlugin,\n  receive,\n  pay\n}\n"]}
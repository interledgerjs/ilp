{"version":3,"file":"spsp.js","sourceRoot":"","sources":["spsp.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6DAAsD;AACtD,6BAAyB;AACzB,2CAA8B;AAE9B,+CAAoC;AAEvB,QAAA,YAAY,GAAG,wBAAwB,CAAA;AAoCpD,SAAsB,KAAK,CAAE,QAAgB;;QAG3C,MAAM,QAAQ,GAAG,IAAI,SAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;YAC/C,CAAC,CAAC,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACpC,CAAC,CAAC,QAAQ,CAAC,CAAA;QAEb,QAAQ,CAAC,QAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ,KAAK,GAAG,CAAC;YAC7C,CAAC,CAAC,kBAAkB;YACpB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAA;QAIrB,MAAM,QAAQ,GAAG,MAAM,oBAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC1C,OAAO,EAAE,EAAE,MAAM,EAAE,oBAAY,EAAE;SAClC,CAAC,CAAA;QAEF,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,wCAAwC;gBACtD,aAAa,GAAG,QAAQ,CAAC,IAAI,GAAG,GAAG;gBACnC,UAAU,GAAG,QAAQ,CAAC,MAAM;gBAC5B,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC,CAAA;SAChD;QAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAElC,OAAO;YACL,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;YAC5C,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC;YACvD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,WAAW;YAC3B,YAAY,EAAE,IAAI,CAAC,aAAa;YAChC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAW;SAC5D,CAAA;IACH,CAAC;CAAA;AAlCD,sBAkCC;AAcD,SAAsB,GAAG,CAAE,MAAgB,EAAE,OAAmB;;QAC9D,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,OAAO,CAAA;QAChD,MAAM,kBAAkB,GAAG,MAAM,CAAC,WAAW,CAAA;QAC7C,MAAM,CAAE,QAAQ,CAAE,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACrC,KAAK,CAAC,QAAQ,CAAC;YACf,MAAM,CAAC,OAAO,EAAE;SACjB,CAAC,CAAA;QAEF,MAAM,EAAE,kBAAkB,EAAE,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAA;QAE3E,IAAI,WAAW,CAAC,OAAO,CAAC,oBAAY,CAAC,KAAK,CAAC,CAAC,EAAE;YAE5C,MAAM,gBAAgB,GAAG,MAAM,sCAAgB,CAAC;gBAC9C,MAAM;gBACN,kBAAkB;gBAClB,YAAY;aACb,CAAC,CAAA;YAEF,MAAM,MAAM,GAAG,gBAAgB,CAAC,YAAY,EAAE,CAAA;YAC9C,IAAI,IAAI,EAAE;gBACR,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;aACnB;YACD,MAAM,OAAO,CAAC,IAAI,CAAC;gBACjB,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBACvD,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aAClD,CAAC,CAAA;YAEF,MAAM,SAAS,GAAG,CAAC,OAAO,CAAC;gBAC3B,CAAC,CAAC,IAAI,sBAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,sBAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACtE,CAAC,CAAC,SAAS,CAAA;YAEX,MAAM,gBAAgB,CAAC,GAAG,EAAE,CAAA;YAE5B,IAAI,CAAC,kBAAkB,EAAE;gBACvB,MAAM,MAAM,CAAC,UAAU,EAAE,CAAA;aAC1B;YAED,OAAO;gBACL,IAAI,EAAE,IAAI,sBAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC;gBAC/C,QAAQ,EAAE,IAAI,sBAAS,CAAC,gBAAgB,CAAC,cAAc,CAAC;gBACxD,SAAS;aACV,CAAA;SACF;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,8CAA8C,CAAC,CAAA;SAC7F;IACH,CAAC;CAAA;AA7CD,kBA6CC","sourcesContent":["import { createConnection } from 'ilp-protocol-stream'\nimport { URL } from 'url'\nimport fetch from 'node-fetch'\nimport { PluginV2 } from './plugin'\nimport BigNumber from 'bignumber.js'\n\nexport const CONTENT_TYPE = 'application/spsp4+json'\nexport interface JsonSpspResponse {\n  destination_account: string\n  shared_secret: string\n  balance?: {\n    maximum: string,\n    current: string\n  }\n  asset_info?: {\n    code: string,\n    scale: number\n  }\n  receiver_info?: {\n    name?: string,\n    image_url?: string\n  }\n}\n\nexport interface SpspResponse {\n  destinationAccount: string\n  sharedSecret: Buffer\n  balance?: {\n    maximum: string,\n    current: string\n  }\n  assetInfo?: {\n    code: string,\n    scale: number\n  }\n  receiverInfo?: {\n    name?: string,\n    imageUrl?: string\n  }\n  contentType: string\n}\n\nexport async function query (receiver: string): Promise<SpspResponse> {\n\n  // TODO: further validation required on payment-pointer?\n  const endpoint = new URL(receiver.startsWith('$')\n    ? 'https://' + receiver.substring(1)\n    : receiver)\n\n  endpoint.pathname = (endpoint.pathname === '/')\n    ? '/.well-known/pay'\n    : endpoint.pathname\n\n  // TODO: make sure that this fetch can never crash this node process. because\n  // this could be called from autonomous code, that would pose big problems.\n  const response = await fetch(endpoint.href, {\n    headers: { accept: CONTENT_TYPE }\n  })\n\n  if (response.status !== 200) {\n    throw new Error('Got error response from spsp receiver.' +\n      ' endpoint=\"' + endpoint.href + '\"' +\n      ' status=' + response.status +\n      ' message=\"' + (await response.text()) + '\"')\n  }\n\n  const json = await response.json()\n\n  return {\n    destinationAccount: json.destination_account,\n    sharedSecret: Buffer.from(json.shared_secret, 'base64'),\n    balance: json.balance,\n    assetInfo: json.ledger_info,\n    receiverInfo: json.receiver_info,\n    contentType: response.headers.get('Content-Type') as string\n  }\n}\n\nexport interface PayOptions {\n  receiver: string,\n  sourceAmount: BigNumber.Value,\n  data?: Buffer\n}\n\nexport interface PayResult {\n  sent: BigNumber.Value,\n  received: BigNumber.Value,\n  requested?: BigNumber.Value\n}\n\nexport async function pay (plugin: PluginV2, options: PayOptions): Promise<PayResult> {\n  const { receiver, sourceAmount, data } = options\n  const pluginWasConnected = plugin.isConnected\n  const [ response ] = await Promise.all([\n    query(receiver),\n    plugin.connect()\n  ])\n\n  const { destinationAccount, sharedSecret, contentType, balance } = response\n\n  if (contentType.indexOf(CONTENT_TYPE) !== -1) {\n\n    const streamConnection = await createConnection({\n      plugin,\n      destinationAccount,\n      sharedSecret\n    })\n\n    const stream = streamConnection.createStream()\n    if (data) {\n      stream.write(data)\n    }\n    await Promise.race([\n      stream.sendTotal(sourceAmount).then(() => stream.end()),\n      new Promise(resolve => stream.on('end', resolve))\n    ])\n\n    const requested = (balance)\n    ? new BigNumber(balance.maximum).minus(new BigNumber(balance.current))\n    : undefined\n\n    await streamConnection.end()\n\n    if (!pluginWasConnected) {\n      await plugin.disconnect()\n    }\n\n    return {\n      sent: new BigNumber(streamConnection.totalSent),\n      received: new BigNumber(streamConnection.totalDelivered),\n      requested\n    }\n  } else {\n    throw new Error(`Unable to send to ${receiver} as it does not support the STREAM protocol.`)\n  }\n}\n"]}
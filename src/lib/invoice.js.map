{"version":3,"file":"invoice.js","sourceRoot":"","sources":["invoice.ts"],"names":[],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport * as crypto from 'crypto'\nimport { STREAM, Receipt } from '..'\nimport { UnwrappedPromise } from './promise'\nimport * as assert from 'assert'\nconst createLogger = require('ilp-logger')\nconst log = createLogger('invoice')\n\nexport interface JsonInvoice {\n  destination_account: string\n  shared_secret: string\n  balance?: {\n    maximum: string,\n    current: string\n  }\n  asset_info?: {\n    code: string,\n    scale: number\n  }\n  receiver_info?: {\n    name?: string,\n    image_url?: string\n  }\n}\n\nexport interface Payee {\n  destinationAccount: string,\n  sharedSecret: Buffer,\n}\n\nexport interface Invoice extends Payee {\n  amount: BigNumber,\n  assetScale?: number,\n  assetCode?: string\n}\n\nexport class InvoiceReceiver implements Invoice {\n\n  private _expectedAmount: BigNumber\n  private _assetScale: number\n  private _assetCode: string\n  private _destinationAccount: string\n  private _sharedSecret: Buffer\n  private _connectionTag: string\n  private _receivedData: Buffer\n  private _paymentPromise: UnwrappedPromise<Receipt>\n  private _dataPromise: UnwrappedPromise<Buffer>\n  private _timer?: NodeJS.Timer\n  private _streamConnection?: STREAM.Connection\n\n  constructor (amount: BigNumber.Value, reference = crypto.randomBytes(16).toString('hex'), streamServer: STREAM.Server) {\n    assert(/^[A-Za-z0-9~_-]*$/.test(reference), 'Reference can only contain valid ILP Address characters.')\n    this._connectionTag = reference\n    const { destinationAccount, sharedSecret } = streamServer.generateAddressAndSecret(this._connectionTag)\n    this._expectedAmount = new BigNumber(amount)\n    this._assetCode = streamServer.assetCode\n    this._assetScale = streamServer.assetScale\n    this._destinationAccount = destinationAccount\n    this._sharedSecret = sharedSecret\n    this._receivedData = Buffer.alloc(0)\n    this._dataPromise = new UnwrappedPromise<Buffer>()\n    this._paymentPromise = new UnwrappedPromise<Receipt>()\n\n    streamServer.on('connection', (connection: STREAM.Connection) => {\n      if (connection.connectionTag === this._connectionTag) {\n        log.debug(`connection opened`)\n        this._streamConnection = connection\n        connection.on('stream', (stream: STREAM.DataAndMoneyStream) => {\n          log.debug(`stream created`)\n          stream.setReceiveMax(this._expectedAmount)\n          stream.on('money', (amountReceived) => {\n            log.trace(`${amountReceived} received`)\n            if (new BigNumber(connection.totalReceived).isGreaterThanOrEqualTo(this._expectedAmount)) {\n              this._complete()\n            }\n          })\n          stream.on('data', (dataReceived) => {\n            log.trace(`${(dataReceived as Buffer).byteLength} bytes of data received`)\n            this._receivedData = Buffer.concat([this._receivedData, dataReceived as Buffer])\n          })\n          stream.on('end', () => {\n            log.debug(`stream ended`)\n            this._complete()\n          })\n        })\n      }\n    })\n  }\n\n  public get destinationAccount (): string {\n    return this._destinationAccount\n  }\n\n  public get sharedSecret (): Buffer {\n    return this._sharedSecret\n  }\n\n  public get amount (): BigNumber {\n    return this._expectedAmount\n  }\n\n  public get assetScale (): number {\n    return this._assetScale\n  }\n  public get assetCode (): string {\n    return this._assetCode\n  }\n\n  public toJSON (): JsonInvoice {\n    return serializePayee(this)\n  }\n\n  public receiveData (): Promise<Buffer> {\n    return this._dataPromise.promise\n  }\n\n  public receivePayment (timeout?: number): Promise<Receipt> {\n    if (timeout) {\n      this._timer = setTimeout(() => {\n        this._timeout()\n      }, timeout)\n    }\n    return this._paymentPromise.promise\n  }\n\n  private _complete () {\n    if (this._timer) {\n      clearTimeout(this._timer)\n    }\n    if (this._streamConnection) {\n      this._paymentPromise.resolve({\n        sourceAccount: this._streamConnection.destinationAccount,\n        destinationAccount: this._streamConnection.sourceAccount,\n        received: {\n          amount: this._streamConnection.totalReceived,\n          assetCode: this._streamConnection.sourceAssetCode,\n          assetScale: this._streamConnection.sourceAssetScale\n        },\n        requested: {\n          amount: this._expectedAmount,\n          assetCode: this._streamConnection.sourceAssetCode,\n          assetScale: this._streamConnection.sourceAssetScale\n        }\n      } as Receipt)\n      this._dataPromise.resolve(this._receivedData)\n      this._streamConnection.end().catch(e => {\n        log.error('Error closing connection after payment was completed.', e)\n      })\n    } else {\n      const error = new Error('No incoming STREAM connection.')\n      this._paymentPromise.reject(error)\n      this._dataPromise.reject(error)\n    }\n  }\n\n  private _timeout () {\n    const error = (this._streamConnection)\n    ? new Error(`Timed out waiting for payment. ` +\n      `Received ${this._streamConnection.totalReceived} payment ` +\n      `and ${this._receivedData.byteLength} bytes of data so far.`)\n    : new Error(`Timed out waiting for connection. `)\n\n    this._paymentPromise.reject(error)\n    this._dataPromise.reject(error)\n    if (this._streamConnection) {\n      this._streamConnection.end().catch(e => {\n        log.error('Error closing connection after payment timed out.', e)\n      })\n    }\n  }\n\n}\n\nexport function serializePayee (receiver: Invoice | Payee): JsonInvoice {\n\n  const invoice = receiver as Invoice\n  const balance = (invoice.amount)\n    ? {\n      current: '0',\n      maximum: invoice.amount.toString()\n    }\n    : undefined\n\n  // tslint:disable-next-line:variable-name\n  const asset_info = (invoice.assetCode && invoice.assetScale)\n    ? {\n      code: invoice.assetCode,\n      scale: invoice.assetScale\n    }\n    : undefined\n\n  return {\n    destination_account: invoice.destinationAccount,\n    shared_secret: invoice.sharedSecret.toString('base64'),\n    balance,\n    asset_info\n  }\n}\n"]}